"""Gestionnaire de sauvegarde et chargement des donn√©es"""
import json
import sqlite3
from pathlib import Path
from typing import List, Optional, Dict, Any
from datetime import datetime
from contextlib import contextmanager

from src.config import DATABASE_URL, ARTISTS_DIR
from src.models import Artist, Track, Credit, CreditRole
from src.utils.logger import get_logger


logger = get_logger(__name__)


class DataManager:
    """G√®re la persistance des donn√©es"""
    
    def __init__(self):
        self.db_path = DATABASE_URL.replace("sqlite:///", "")
        self._init_database()
    
    def _init_database(self):
        """Initialise la base de donn√©es"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            # Table des artistes
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS artists (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL UNIQUE,
                    genius_id INTEGER,
                    spotify_id TEXT,
                    discogs_id INTEGER,
                    created_at TIMESTAMP,
                    updated_at TIMESTAMP
                )
            """)
            
            # Table des morceaux avec track_number
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS tracks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    artist_id INTEGER NOT NULL,
                    album TEXT,
                    track_number INTEGER,
                    release_date TIMESTAMP,
                    genius_id INTEGER,
                    spotify_id TEXT,
                    discogs_id INTEGER,
                    bpm INTEGER,
                    duration INTEGER,
                    genre TEXT,
                    genius_url TEXT,
                    spotify_url TEXT,
                    created_at TIMESTAMP,
                    updated_at TIMESTAMP,
                    last_scraped TIMESTAMP,
                    FOREIGN KEY (artist_id) REFERENCES artists (id),
                    UNIQUE(title, artist_id)
                )
            """)
            
            # Table des cr√©dits
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS credits (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    track_id INTEGER NOT NULL,
                    name TEXT NOT NULL,
                    role TEXT NOT NULL,
                    role_detail TEXT,
                    source TEXT,
                    FOREIGN KEY (track_id) REFERENCES tracks (id),
                    UNIQUE(track_id, name, role, role_detail)
                )
            """)
            
            # Table des erreurs de scraping
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS scraping_errors (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    track_id INTEGER NOT NULL,
                    error_message TEXT,
                    error_time TIMESTAMP,
                    FOREIGN KEY (track_id) REFERENCES tracks (id)
                )
            """)
            
            conn.commit()
            logger.info("Base de donn√©es initialis√©e")
    
    @contextmanager
    def _get_connection(self):
        """Context manager pour les connexions √† la base de donn√©es"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
        finally:
            conn.close()
    
    def save_artist(self, artist: Artist) -> int:
        """Sauvegarde ou met √† jour un artiste"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            if artist.id:
                # Mise √† jour
                cursor.execute("""
                    UPDATE artists 
                    SET name = ?, genius_id = ?, spotify_id = ?, 
                        discogs_id = ?, updated_at = ?
                    WHERE id = ?
                """, (artist.name, artist.genius_id, artist.spotify_id,
                      artist.discogs_id, datetime.now(), artist.id))
            else:
                # Insertion
                cursor.execute("""
                    INSERT INTO artists (name, genius_id, spotify_id, 
                                       discogs_id, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (artist.name, artist.genius_id, artist.spotify_id,
                      artist.discogs_id, datetime.now(), datetime.now()))
                artist.id = cursor.lastrowid
            
            conn.commit()
            logger.info(f"Artiste sauvegard√©: {artist.name} (ID: {artist.id})")
            return artist.id
    
    def save_track(self, track: Track) -> int:
        """Sauvegarde ou met √† jour un morceau - VERSION PR√âSERVANT LES FEATURES ET PAROLES"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            # S'assurer que l'artiste existe
            if not track.artist or not track.artist.id:
                raise ValueError("Le morceau doit avoir un artiste avec un ID")
            
            # V√©rifier si le track existe d√©j√†
            cursor.execute("""
                SELECT id, is_featuring, primary_artist_name, featured_artists, 
                    lyrics, has_lyrics, lyrics_scraped_at FROM tracks 
                WHERE title = ? AND artist_id = ?
            """, (track.title, track.artist.id))
            
            existing_track = cursor.fetchone()
            
            if existing_track:
                # Le track existe d√©j√†
                track.id = existing_track[0]
                
                # ‚úÖ CORRECTION CRITIQUE: Pr√©server les infos de featuring ET paroles existantes
                # Si les infos de featuring existent en base mais pas sur l'objet track, les restaurer
                if existing_track[1] and not hasattr(track, 'is_featuring'):  # is_featuring en base
                    track.is_featuring = bool(existing_track[1])
                    track.primary_artist_name = existing_track[2]
                    track.featured_artists = existing_track[3]
                    logger.info(f"üîí Pr√©servation des infos featuring pour: {track.title}")
                
                # ‚úÖ NOUVEAU: Pr√©server les paroles existantes si pas nouvelles
                if existing_track[4] and not hasattr(track, 'lyrics'):  # lyrics en base
                    track.lyrics = existing_track[4]
                    track.has_lyrics = bool(existing_track[5])
                    track.lyrics_scraped_at = existing_track[6]
                    logger.info(f"üìù Pr√©servation des paroles pour: {track.title}")
                
                logger.debug(f"Track existant trouv√© (ID: {track.id}), mise √† jour...")
                
                cursor.execute("""
                    UPDATE tracks 
                    SET album = ?, track_number = ?, release_date = ?, 
                        genius_id = ?, spotify_id = ?, discogs_id = ?,
                        bpm = ?, duration = ?, genre = ?,
                        genius_url = ?, spotify_url = ?,
                        is_featuring = ?, primary_artist_name = ?, featured_artists = ?,
                        lyrics = ?, lyrics_scraped_at = ?, has_lyrics = ?,
                        updated_at = ?, last_scraped = ?
                    WHERE id = ?
                """, (track.album, getattr(track, 'track_number', None), track.release_date,
                    track.genius_id, track.spotify_id, track.discogs_id,
                    track.bpm, track.duration, track.genre,
                    track.genius_url, track.spotify_url,
                    getattr(track, 'is_featuring', False),
                    getattr(track, 'primary_artist_name', None),
                    getattr(track, 'featured_artists', None),
                    getattr(track, 'lyrics', None),
                    getattr(track, 'lyrics_scraped_at', None),
                    bool(getattr(track, 'lyrics', None)),
                    datetime.now(), track.last_scraped, track.id))
            else:
                # Nouveau track, ins√©rer
                logger.debug(f"Nouveau track, insertion...")
                
                cursor.execute("""
                    INSERT INTO tracks (
                        title, artist_id, album, track_number, release_date,
                        genius_id, spotify_id, discogs_id,
                        bpm, duration, genre, genius_url, spotify_url,
                        is_featuring, primary_artist_name, featured_artists,
                        lyrics, lyrics_scraped_at, has_lyrics,
                        created_at, updated_at, last_scraped
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (track.title, track.artist.id, track.album, getattr(track, 'track_number', None), track.release_date,
                    track.genius_id, track.spotify_id, track.discogs_id,
                    track.bpm, track.duration, track.genre,
                    track.genius_url, track.spotify_url,
                    getattr(track, 'is_featuring', False),
                    getattr(track, 'primary_artist_name', None),
                    getattr(track, 'featured_artists', None),
                    getattr(track, 'lyrics', None),
                    getattr(track, 'lyrics_scraped_at', None),
                    bool(getattr(track, 'lyrics', None)),
                    datetime.now(), datetime.now(), track.last_scraped))
                track.id = cursor.lastrowid
            
            # Supprimer les anciens cr√©dits avant d'ajouter les nouveaux (pour √©viter les doublons)
            if track.id:
                cursor.execute("DELETE FROM credits WHERE track_id = ?", (track.id,))
                
                # Sauvegarder les nouveaux cr√©dits
                for credit in track.credits:
                    self._save_credit(cursor, track.id, credit)
            
            # Sauvegarder les erreurs
            for error in track.scraping_errors:
                cursor.execute("""
                    INSERT INTO scraping_errors (track_id, error_message, error_time)
                    VALUES (?, ?, ?)
                """, (track.id, error, datetime.now()))
            
            conn.commit()
            
            lyrics_info = f", Paroles: {bool(getattr(track, 'lyrics', None))}" if hasattr(track, 'lyrics') else ""
            logger.info(f"Morceau sauvegard√©: {track.title} (ID: {track.id}, Featuring: {getattr(track, 'is_featuring', False)}{lyrics_info})")
            return track.id

    def _save_credit(self, cursor, track_id: int, credit: Credit):
        """Sauvegarde un cr√©dit - VERSION SIMPLIFI√âE SANS V√âRIFICATION UNIQUE"""
        try:
            cursor.execute("""
                INSERT INTO credits (track_id, name, role, role_detail, source)
                VALUES (?, ?, ?, ?, ?)
            """, (track_id, credit.name, credit.role.value, 
                  credit.role_detail, credit.source))
        except Exception as e:
            # Log mais ne pas arr√™ter le processus pour un cr√©dit
            logger.debug(f"Erreur lors de la sauvegarde du cr√©dit {credit.name}: {e}")
    
    def get_artist_by_name(self, name: str) -> Optional[Artist]:
        """R√©cup√®re un artiste par son nom - VERSION S√âCURIS√âE"""
        try:
            logger.debug(f"üîç Recherche de l'artiste: '{name}'")
            
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM artists WHERE name = ?", (name,))
                row = cursor.fetchone()
                
                if not row:
                    logger.debug(f"‚ùå Aucun artiste trouv√© pour: '{name}'")
                    return None
                
                logger.debug(f"‚úÖ Artiste trouv√© en base: {dict(row)}")
                
                # ‚úÖ CORRECTION: Acc√®s s√©curis√© aux colonnes
                try:
                    # V√©rifier que toutes les colonnes requises existent
                    required_columns = ['id', 'name', 'genius_id', 'spotify_id', 'discogs_id']
                    available_columns = row.keys()
                    
                    logger.debug(f"üìã Colonnes disponibles: {list(available_columns)}")
                    
                    # Extraire les donn√©es de mani√®re s√©curis√©e
                    artist_data = {}
                    for col in required_columns:
                        if col in available_columns:
                            artist_data[col] = row[col]
                            logger.debug(f"  ‚úÖ {col}: {row[col]}")
                        else:
                            logger.warning(f"  ‚ö†Ô∏è Colonne manquante: {col}")
                            artist_data[col] = None
                    
                    # Cr√©er l'objet Artist avec les donn√©es extraites
                    artist = Artist(
                        id=artist_data.get('id'),
                        name=artist_data.get('name', 'Unknown'),
                        genius_id=artist_data.get('genius_id'),
                        spotify_id=artist_data.get('spotify_id'),
                        discogs_id=artist_data.get('discogs_id')
                    )
                    
                    logger.debug(f"üé§ Objet Artist cr√©√©: {artist.name} (ID: {artist.id})")
                    
                    # ‚úÖ CORRECTION: Chargement s√©curis√© des morceaux
                    try:
                        artist.tracks = self.get_artist_tracks(artist.id) if artist.id else []
                        logger.debug(f"üéµ {len(artist.tracks)} morceaux charg√©s")
                    except Exception as tracks_error:
                        logger.warning(f"‚ö†Ô∏è Erreur lors du chargement des morceaux: {tracks_error}")
                        artist.tracks = []
                    
                    return artist
                    
                except KeyError as key_error:
                    logger.error(f"‚ùå Cl√© manquante dans la base: {key_error}")
                    logger.error(f"üìã Colonnes disponibles: {list(row.keys()) if hasattr(row, 'keys') else 'N/A'}")
                    
                    # Tentative de r√©cup√©ration avec les donn√©es disponibles
                    try:
                        artist = Artist(
                            id=getattr(row, 'id', None) if hasattr(row, 'id') else row[0] if len(row) > 0 else None,
                            name=getattr(row, 'name', name) if hasattr(row, 'name') else row[1] if len(row) > 1 else name,
                            genius_id=getattr(row, 'genius_id', None) if hasattr(row, 'genius_id') else row[2] if len(row) > 2 else None,
                            spotify_id=getattr(row, 'spotify_id', None) if hasattr(row, 'spotify_id') else row[3] if len(row) > 3 else None,
                            discogs_id=getattr(row, 'discogs_id', None) if hasattr(row, 'discogs_id') else row[4] if len(row) > 4 else None
                        )
                        logger.warning(f"‚ö†Ô∏è Artiste cr√©√© en mode r√©cup√©ration: {artist.name}")
                        artist.tracks = []
                        return artist
                    except Exception as recovery_error:
                        logger.error(f"‚ùå Impossible de r√©cup√©rer les donn√©es: {recovery_error}")
                        return None
                
                except Exception as row_error:
                    logger.error(f"‚ùå Erreur lors du traitement de la ligne: {row_error}")
                    logger.error(f"üìã Type de row: {type(row)}")
                    logger.error(f"üìã Contenu de row: {row}")
                    return None
                
        except sqlite3.Error as db_error:
            logger.error(f"‚ùå Erreur de base de donn√©es: {db_error}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erreur inattendue dans get_artist_by_name: {e}")
            logger.error(f"üìã Type d'erreur: {type(e).__name__}")
            import traceback
            logger.debug(f"üìú Traceback complet: {traceback.format_exc()}")
            return None
    
    def get_artist_tracks(self, artist_id: int) -> List[Track]:
        """R√©cup√®re tous les morceaux d'un artiste - VERSION FINALE CORRIG√âE AVEC PAROLES"""
        tracks = []
        
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                # V√©rifier d'abord si l'artiste a des tracks
                cursor.execute("SELECT COUNT(*) FROM tracks WHERE artist_id = ?", (artist_id,))
                track_count = cursor.fetchone()[0]
                
                if track_count == 0:
                    logger.warning(f"‚ö†Ô∏è Aucun track trouv√© pour artist_id {artist_id}")
                    return tracks
                
                logger.debug(f"üìä {track_count} tracks trouv√©s pour artist_id {artist_id}")
                
                # R√©cup√©rer les tracks AVEC les nouvelles colonnes paroles
                cursor.execute("""
                    SELECT * FROM tracks WHERE artist_id = ?
                    ORDER BY title
                """, (artist_id,))
                
                rows = cursor.fetchall()
                logger.debug(f"üì¶ {len(rows)} lignes r√©cup√©r√©es de la base")
                
                for row in rows:
                    try:
                        # Acc√®s direct aux colonnes (votre base fonctionne parfaitement)
                        track = Track(
                            id=row['id'],
                            title=row['title'],
                            album=row['album'],
                            track_number=row['track_number'],
                            release_date=row['release_date'],
                            genius_id=row['genius_id'],
                            spotify_id=row['spotify_id'],
                            discogs_id=row['discogs_id'],
                            bpm=row['bpm'],
                            duration=row['duration'],
                            genre=row['genre'],
                            genius_url=row['genius_url'],
                            spotify_url=row['spotify_url'],
                            last_scraped=row['last_scraped']
                        )
                        
                        # ‚úÖ AJOUT: Attributs de featuring
                        track.is_featuring = bool(row['is_featuring']) if row['is_featuring'] else False
                        track.primary_artist_name = row['primary_artist_name']
                        track.featured_artists = row['featured_artists']
                        
                        # ‚úÖ NOUVEAU: Attributs de paroles
                        available_keys = row.keys() if hasattr(row, 'keys') else []
                        
                        # Charger les paroles si disponibles
                        if 'lyrics' in available_keys and row['lyrics']:
                            track.lyrics = row['lyrics']
                            track.has_lyrics = bool(row.get('has_lyrics', False))
                            track.lyrics_scraped_at = row.get('lyrics_scraped_at')
                            logger.debug(f"üìù Paroles charg√©es pour: {track.title}")
                        else:
                            track.lyrics = None
                            track.has_lyrics = False
                            track.lyrics_scraped_at = None
                        
                        # Log pour debug des features
                        if track.is_featuring:
                            logger.debug(f"üé§ Featuring charg√©: {track.title} (principal: {track.primary_artist_name})")
                        
                        # Charger les cr√©dits
                        try:
                            track.credits = self._get_track_credits(cursor, track.id)
                        except Exception as credits_error:
                            logger.warning(f"‚ö†Ô∏è Erreur chargement cr√©dits pour {track.title}: {credits_error}")
                            track.credits = []
                        
                        tracks.append(track)
                        
                    except Exception as track_error:
                        logger.error(f"‚ùå Erreur lors du traitement du track {row['title']}: {track_error}")
                        import traceback
                        logger.debug(f"Traceback: {traceback.format_exc()}")
                        continue
                
                logger.info(f"‚úÖ {len(tracks)} tracks charg√©s avec succ√®s pour artist_id {artist_id}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©rale dans get_artist_tracks: {e}")
            import traceback
            logger.debug(f"Traceback: {traceback.format_exc()}")
        
        return tracks
    
    def _safe_get(self, row, column_name: str, available_columns: list, default=None):
        """Acc√®s s√©curis√© √† une colonne de la base de donn√©es"""
        try:
            if column_name in available_columns:
                if hasattr(row, 'keys') and callable(row.keys):
                    # sqlite3.Row
                    return row[column_name]
                elif hasattr(row, '__getitem__'):
                    # Tuple/List - utiliser l'index
                    column_index = available_columns.index(column_name)
                    if column_index < len(row):
                        return row[column_index]
                    else:
                        return default
                else:
                    return default
            else:
                return default
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Erreur _safe_get pour {column_name}: {e}")
            return default
    
    def _get_track_credits(self, cursor, track_id: int) -> List[Credit]:
        """R√©cup√®re les cr√©dits d'un morceau"""
        credits = []
        cursor.execute("""
            SELECT * FROM credits WHERE track_id = ?
        """, (track_id,))
        
        for row in cursor.fetchall():
            credit = Credit(
                name=row['name'],
                role=CreditRole(row['role']),
                role_detail=row['role_detail'],
                source=row['source']
            )
            credits.append(credit)
        
        return credits
    
    def export_to_json(self, artist_name: str, filepath: Optional[Path] = None):
        """Exporte les donn√©es d'un artiste en JSON"""
        artist = self.get_artist_by_name(artist_name)
        if not artist:
            logger.error(f"Artiste non trouv√©: {artist_name}")
            return None
        
        # D√©terminer le chemin du fichier
        if filepath is None:
            filename = f"{artist.name.replace(' ', '_').lower()}_credits.json"
            filepath = ARTISTS_DIR / filename
        
        # Pr√©parer les donn√©es
        data = {
            'artist': artist.to_dict(),
            'tracks': [track.to_dict() for track in artist.tracks],
            'export_date': datetime.now().isoformat(),
            'total_tracks': len(artist.tracks),
            'total_music_credits': sum(len(t.get_music_credits()) for t in artist.tracks),
            'total_video_credits': sum(len(t.get_video_credits()) for t in artist.tracks),
            'total_all_credits': sum(len(t.credits) for t in artist.tracks)
        }
        
        # Sauvegarder
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"Donn√©es export√©es vers: {filepath}")
        return filepath
    
    def get_statistics(self) -> Dict[str, Any]:
        """Retourne des statistiques sur la base de donn√©es"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            stats = {}
            
            # Nombre d'artistes
            cursor.execute("SELECT COUNT(*) FROM artists")
            stats['total_artists'] = cursor.fetchone()[0]
            
            # Nombre de morceaux
            cursor.execute("SELECT COUNT(*) FROM tracks")
            stats['total_tracks'] = cursor.fetchone()[0]
            
            # Nombre de cr√©dits
            cursor.execute("SELECT COUNT(*) FROM credits")
            stats['total_credits'] = cursor.fetchone()[0]
            
            # Morceaux avec cr√©dits complets
            cursor.execute("""
                SELECT COUNT(DISTINCT t.id) 
                FROM tracks t 
                JOIN credits c ON t.id = c.track_id 
                WHERE c.role IN ('Producer', 'Writer')
                GROUP BY t.id 
                HAVING COUNT(DISTINCT c.role) = 2
            """)
            result = cursor.fetchone()
            stats['tracks_with_complete_credits'] = result[0] if result else 0
            
            # Erreurs r√©centes
            cursor.execute("""
                SELECT COUNT(*) FROM scraping_errors 
                WHERE error_time > datetime('now', '-1 day')
            """)
            stats['recent_errors'] = cursor.fetchone()[0]
            
            return stats
    
    def get_scraping_analytics(self, artist_name: str) -> Dict[str, Any]:
        """Analyse l'efficacit√© du scraping vs API"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            # R√©cup√©rer les tracks de l'artiste
            cursor.execute("""
                SELECT t.*, a.name as artist_name
                FROM tracks t 
                JOIN artists a ON t.artist_id = a.id 
                WHERE a.name = ?
            """, (artist_name,))
            
            tracks = cursor.fetchall()
            
            analytics = {
                'total_tracks': len(tracks),
                'api_coverage': {
                    'album': 0,
                    'release_date': 0,
                    'genre': 0,
                    'bpm': 0
                },
                'scraping_needed': {
                    'album': 0,
                    'release_date': 0,
                    'genre': 0,
                    'credits': 0
                },
                'data_completeness': {
                    'complete_tracks': 0,
                    'missing_album': 0,
                    'missing_date': 0,
                    'missing_genre': 0,
                    'missing_credits': 0
                },
                'time_savings_estimate': 0
            }
            
            if not tracks:
                return analytics
            
            for track in tracks:
                # Analyser la compl√©tude
                if track['album']:
                    analytics['api_coverage']['album'] += 1
                else:
                    analytics['scraping_needed']['album'] += 1
                    analytics['data_completeness']['missing_album'] += 1
                
                if track['release_date']:
                    analytics['api_coverage']['release_date'] += 1
                else:
                    analytics['scraping_needed']['release_date'] += 1
                    analytics['data_completeness']['missing_date'] += 1
                
                if track['genre']:
                    # Le genre vient toujours du scraping
                    analytics['scraping_needed']['genre'] += 1
                else:
                    analytics['data_completeness']['missing_genre'] += 1
                
                if track['bpm']:
                    analytics['api_coverage']['bpm'] += 1
                
                # Compter les cr√©dits
                cursor.execute("SELECT COUNT(*) FROM credits WHERE track_id = ?", (track['id'],))
                credit_count = cursor.fetchone()[0]
                
                if credit_count > 0:
                    analytics['scraping_needed']['credits'] += 1
                else:
                    analytics['data_completeness']['missing_credits'] += 1
                
                # Track complet = album + date + genre + cr√©dits
                if (track['album'] and track['release_date'] and 
                    track['genre'] and credit_count > 0):
                    analytics['data_completeness']['complete_tracks'] += 1
            
            # Calculer les pourcentages
            total = analytics['total_tracks']
            for category in ['api_coverage', 'scraping_needed', 'data_completeness']:
                for key in analytics[category]:
                    if total > 0:
                        percentage = (analytics[category][key] / total) * 100
                        analytics[category][f'{key}_percentage'] = round(percentage, 1)
            
            # Estimation du gain de temps (bas√© sur 2s par morceau scraped compl√®tement vs 0.5s pour m√©tadonn√©es partielles)
            full_scraping_time = total * 2  # 2 secondes par track complet
            partial_scraping_time = (
                analytics['scraping_needed']['album'] * 0.1 +  # 0.1s pour scraper juste l'album
                analytics['scraping_needed']['release_date'] * 0.1 +  # 0.1s pour la date
                analytics['scraping_needed']['genre'] * 0.2 +  # 0.2s pour le genre
                analytics['scraping_needed']['credits'] * 1.5  # 1.5s pour les cr√©dits (toujours n√©cessaire)
            )
            
            analytics['time_savings_estimate'] = max(0, full_scraping_time - partial_scraping_time)
            analytics['efficiency_gain_percentage'] = round(
                (analytics['time_savings_estimate'] / full_scraping_time * 100) if full_scraping_time > 0 else 0, 1
            )
            
            return analytics

    def delete_artist(self, artist_name: str) -> bool:
        """Supprime un artiste et toutes ses donn√©es associ√©es"""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                # R√©cup√©rer l'ID de l'artiste
                cursor.execute("SELECT id FROM artists WHERE name = ?", (artist_name,))
                artist_row = cursor.fetchone()
                
                if not artist_row:
                    logger.warning(f"Artiste non trouv√©: {artist_name}")
                    return False
                
                artist_id = artist_row[0]
                
                # Supprimer dans l'ordre (contraintes de cl√©s √©trang√®res)
                
                # 1. Supprimer les erreurs de scraping
                cursor.execute("DELETE FROM scraping_errors WHERE track_id IN (SELECT id FROM tracks WHERE artist_id = ?)", (artist_id,))
                deleted_errors = cursor.rowcount
                
                # 2. Supprimer les cr√©dits
                cursor.execute("DELETE FROM credits WHERE track_id IN (SELECT id FROM tracks WHERE artist_id = ?)", (artist_id,))
                deleted_credits = cursor.rowcount
                
                # 3. Supprimer les morceaux
                cursor.execute("DELETE FROM tracks WHERE artist_id = ?", (artist_id,))
                deleted_tracks = cursor.rowcount
                
                # 4. Supprimer l'artiste
                cursor.execute("DELETE FROM artists WHERE id = ?", (artist_id,))
                deleted_artist = cursor.rowcount
                
                conn.commit()
                
                logger.info(f"Artiste '{artist_name}' supprim√© avec succ√®s:")
                logger.info(f"  - {deleted_tracks} morceaux")
                logger.info(f"  - {deleted_credits} cr√©dits")
                logger.info(f"  - {deleted_errors} erreurs de scraping")
                
                return deleted_artist > 0
                
        except Exception as e:
            logger.error(f"Erreur lors de la suppression de l'artiste: {e}")
            return False

    def get_artist_details(self, artist_name: str) -> Dict[str, Any]:
        """R√©cup√®re les d√©tails complets d'un artiste"""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                # Informations de base de l'artiste
                cursor.execute("""
                    SELECT id, name, genius_id, spotify_id, discogs_id, created_at, updated_at
                    FROM artists WHERE name = ?
                """, (artist_name,))
                
                artist_row = cursor.fetchone()
                if not artist_row:
                    return {}
                
                artist_id = artist_row[0]
                
                # Compter les morceaux et cr√©dits
                cursor.execute("""
                    SELECT 
                        COUNT(DISTINCT t.id) as tracks_count,
                        COUNT(DISTINCT c.id) as credits_count
                    FROM tracks t
                    LEFT JOIN credits c ON t.id = c.track_id
                    WHERE t.artist_id = ?
                """, (artist_id,))
                
                counts = cursor.fetchone()
                
                # Morceaux r√©cents
                cursor.execute("""
                    SELECT 
                        t.title, 
                        t.album, 
                        t.release_date,
                        COUNT(c.id) as credits_count
                    FROM tracks t
                    LEFT JOIN credits c ON t.id = c.track_id
                    WHERE t.artist_id = ?
                    GROUP BY t.id, t.title, t.album, t.release_date
                    ORDER BY t.updated_at DESC
                    LIMIT 20
                """, (artist_id,))
                
                recent_tracks = []
                for row in cursor.fetchall():
                    recent_tracks.append({
                        'title': row[0],
                        'album': row[1],
                        'release_date': row[2],
                        'credits_count': row[3]
                    })
                
                # Cr√©dits par r√¥le
                cursor.execute("""
                    SELECT role, COUNT(*) as count
                    FROM credits c
                    JOIN tracks t ON c.track_id = t.id
                    WHERE t.artist_id = ?
                    GROUP BY role
                    ORDER BY count DESC
                """, (artist_id,))
                
                credits_by_role = {}
                for row in cursor.fetchall():
                    credits_by_role[row[0]] = row[1]
                
                return {
                    'name': artist_row[1],
                    'genius_id': artist_row[2],
                    'spotify_id': artist_row[3],
                    'discogs_id': artist_row[4],
                    'created_at': artist_row[5],
                    'updated_at': artist_row[6],
                    'tracks_count': counts[0] if counts else 0,
                    'credits_count': counts[1] if counts else 0,
                    'recent_tracks': recent_tracks,
                    'credits_by_role': credits_by_role
                }
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des d√©tails: {e}")
            return {}

    def clean_orphaned_data(self) -> Dict[str, int]:
        """Nettoie les donn√©es orphelines dans la base"""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                # Supprimer les cr√©dits orphelins (sans track)
                cursor.execute("""
                    DELETE FROM credits 
                    WHERE track_id NOT IN (SELECT id FROM tracks)
                """)
                orphaned_credits = cursor.rowcount
                
                # Supprimer les erreurs orphelines (sans track)
                cursor.execute("""
                    DELETE FROM scraping_errors 
                    WHERE track_id NOT IN (SELECT id FROM tracks)
                """)
                orphaned_errors = cursor.rowcount
                
                # Supprimer les tracks orphelins (sans artiste)
                cursor.execute("""
                    DELETE FROM tracks 
                    WHERE artist_id NOT IN (SELECT id FROM artists)
                """)
                orphaned_tracks = cursor.rowcount
                
                conn.commit()
                
                cleaned = {
                    'orphaned_credits': orphaned_credits,
                    'orphaned_errors': orphaned_errors,
                    'orphaned_tracks': orphaned_tracks
                }
                
                if sum(cleaned.values()) > 0:
                    logger.info(f"Nettoyage termin√©: {cleaned}")
                
                return cleaned
                
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage: {e}")
            return {'orphaned_credits': 0, 'orphaned_errors': 0, 'orphaned_tracks': 0}

    def get_database_size_info(self) -> Dict[str, Any]:
        """Retourne des informations sur la taille de la base de donn√©es"""
        try:
            import os
            
            db_file_path = self.db_path
            
            info = {
                'file_exists': os.path.exists(db_file_path),
                'file_size_bytes': 0,
                'file_size_mb': 0,
                'file_path': db_file_path
            }
            
            if info['file_exists']:
                info['file_size_bytes'] = os.path.getsize(db_file_path)
                info['file_size_mb'] = round(info['file_size_bytes'] / (1024 * 1024), 2)
            
            # Statistiques des tables
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                tables = ['artists', 'tracks', 'credits', 'scraping_errors']
                for table in tables:
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cursor.fetchone()[0]
                    info[f'{table}_count'] = count
            
            return info
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des infos de taille: {e}")
            return {}
        
    def force_update_track_credits(self, track: Track) -> int:
        """Force la mise √† jour compl√®te des cr√©dits d'un morceau - VERSION PR√âSERVANT FEATURES"""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                # ‚úÖ CORRECTION: R√©cup√©rer les infos featuring AVANT suppression
                cursor.execute("""
                    SELECT is_featuring, primary_artist_name, featured_artists 
                    FROM tracks WHERE id = ?
                """, (track.id,))
                
                featuring_info = cursor.fetchone()
                
                if featuring_info:
                    # Pr√©server les infos featuring sur l'objet track
                    track.is_featuring = bool(featuring_info[0]) if featuring_info[0] else False
                    track.primary_artist_name = featuring_info[1]
                    track.featured_artists = featuring_info[2]
                    logger.info(f"üîí Infos featuring pr√©serv√©es pour {track.title}")
                else:
                    track.is_featuring = False
                
                # Supprimer TOUS les anciens cr√©dits
                cursor.execute("DELETE FROM credits WHERE track_id = ?", (track.id,))
                deleted_count = cursor.rowcount
                logger.info(f"üóëÔ∏è {deleted_count} anciens cr√©dits supprim√©s pour '{track.title}'")
                
                # Supprimer les anciennes erreurs de scraping
                cursor.execute("DELETE FROM scraping_errors WHERE track_id = ?", (track.id,))
                deleted_errors = cursor.rowcount
                if deleted_errors > 0:
                    logger.info(f"üóëÔ∏è {deleted_errors} anciennes erreurs supprim√©es")
                
                # Remettre √† z√©ro les m√©tadonn√©es de scraping (MAIS PR√âSERVER FEATURING)
                cursor.execute("""
                    UPDATE tracks 
                    SET last_scraped = NULL,
                        genre = CASE 
                            WHEN genre IS NOT NULL AND genre != '' THEN genre 
                            ELSE NULL 
                        END
                    WHERE id = ?
                """, (track.id,))
                
                # Sauvegarder les nouveaux cr√©dits
                for credit in track.credits:
                    self._save_credit(cursor, track.id, credit)
                
                # Mettre √† jour le track complet (EN PR√âSERVANT LES FEATURES)
                cursor.execute("""
                    UPDATE tracks 
                    SET album = ?, track_number = ?, release_date = ?, 
                        genius_id = ?, spotify_id = ?, discogs_id = ?,
                        bpm = ?, duration = ?, genre = ?,
                        genius_url = ?, spotify_url = ?,
                        is_featuring = ?, primary_artist_name = ?, featured_artists = ?,
                        updated_at = ?, last_scraped = ?
                    WHERE id = ?
                """, (track.album, getattr(track, 'track_number', None), track.release_date,
                    track.genius_id, track.spotify_id, track.discogs_id,
                    track.bpm, track.duration, track.genre,
                    track.genius_url, track.spotify_url,
                    getattr(track, 'is_featuring', False),
                    getattr(track, 'primary_artist_name', None),
                    getattr(track, 'featured_artists', None),
                    datetime.now(), track.last_scraped, track.id))
                
                # Sauvegarder les nouvelles erreurs s'il y en a
                for error in track.scraping_errors:
                    cursor.execute("""
                        INSERT INTO scraping_errors (track_id, error_message, error_time)
                        VALUES (?, ?, ?)
                    """, (track.id, error, datetime.now()))
                
                conn.commit()
                
                new_credits_count = len(track.credits)
                logger.info(f"‚úÖ Mise √† jour forc√©e termin√©e pour '{track.title}': {new_credits_count} nouveaux cr√©dits (Featuring pr√©serv√©: {getattr(track, 'is_featuring', False)})")
                
                return new_credits_count
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la mise √† jour forc√©e: {e}")
            return 0

    def force_update_multiple_tracks(self, tracks: List[Track], progress_callback=None) -> Dict[str, int]:
        """Force la mise √† jour de plusieurs morceaux"""
        results = {
            'updated': 0,
            'failed': 0,
            'total_credits_before': 0,
            'total_credits_after': 0
        }
        
        total = len(tracks)
        
        for i, track in enumerate(tracks):
            try:
                # Compter les cr√©dits avant
                with self._get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT COUNT(*) FROM credits WHERE track_id = ?", (track.id,))
                    credits_before = cursor.fetchone()[0]
                    results['total_credits_before'] += credits_before
                
                # Mise √† jour forc√©e
                new_credits = self.force_update_track_credits(track)
                
                if new_credits >= 0:  # Succ√®s (m√™me si 0 cr√©dits)
                    results['updated'] += 1
                    results['total_credits_after'] += new_credits
                else:
                    results['failed'] += 1
                
                if progress_callback:
                    progress_callback(i + 1, total, f"Mise √† jour: {track.title}")
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur sur {track.title}: {e}")
                results['failed'] += 1
        
        logger.info(f"üîÑ Mise √† jour forc√©e termin√©e: {results['updated']} r√©ussis, {results['failed']} √©chou√©s")
        logger.info(f"üìä Cr√©dits: {results['total_credits_before']} ‚Üí {results['total_credits_after']}")
        
        return results