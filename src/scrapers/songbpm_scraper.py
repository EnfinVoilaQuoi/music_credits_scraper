"""Scraper pour r√©cup√©rer le BPM depuis songbpm.com avec Selenium"""
import re
import time
from typing import Optional, Dict, Any, List
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

from src.models import Track
from src.utils.logger import get_logger, log_api
from src.config import DELAY_BETWEEN_REQUESTS

logger = get_logger(__name__)


class SongBPMScraper:
    """Scrape songbpm.com pour obtenir le BPM, Key et Duration"""

    def __init__(self, headless: bool = False):
        """
        Initialise le scraper avec Selenium
        
        Args:
            headless: Si True, ex√©cute le navigateur en mode invisible
        """
        self.base_url = "https://songbpm.com/"
        self.driver = None
        self.wait = None
        self.headless = headless
        
        # Pattern pour extraire l'ID Spotify depuis une URL
        self.spotify_id_pattern = re.compile(r'spotify\.com/(?:intl-[a-z]{2}/)?track/([a-zA-Z0-9]{22})')

    def _ensure_driver(self):
        """
        S'assure que le driver est initialis√© (initialisation paresseuse)
        Cette m√©thode sera appel√©e automatiquement avant chaque utilisation du driver
        """
        if self.driver is None:
            self._init_driver()

    def _init_driver(self):
        """Initialise le driver Selenium avec configuration robuste"""
        try:
            logger.info(f"üåê Initialisation du driver Selenium SongBPM (headless={self.headless})...")

            options = Options()

            # Mode headless ou visible selon configuration
            if self.headless:
                options.add_argument('--headless=new')  # Nouveau mode headless
                options.add_argument('--window-size=1920,1080')

            # Options standards pour √©viter la d√©tection
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)

            # User-Agent r√©aliste
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

            # R√©duire les logs
            options.add_argument('--log-level=3')
            options.add_argument('--silent')
            options.add_experimental_option('excludeSwitches', ['enable-logging'])
            options.add_argument('--disable-logging')

            # D√©sactiver WebGL/WebGPU/GPU/DirectX compl√®tement
            options.add_argument('--disable-webgl')
            options.add_argument('--disable-webgl2')
            options.add_argument('--disable-webgpu')
            options.add_argument('--disable-3d-apis')
            options.add_argument('--disable-software-rasterizer')
            options.add_argument('--disable-gpu-sandbox')
            options.add_argument('--use-angle=disabled')
            options.add_argument('--disable-d3d11')
            options.add_argument('--disable-features=VizDisplayCompositor')
            options.add_argument('--disable-accelerated-2d-canvas')
            options.add_argument('--disable-accelerated-video-decode')

            # Service avec redirection des logs vers NUL
            import platform
            if platform.system() == 'Windows':
                service = ChromeService(ChromeDriverManager().install(), log_path='NUL')
            else:
                service = ChromeService(ChromeDriverManager().install(), log_path='/dev/null')

            # Pr√©f√©rences pour d√©sactiver les popups et notifications
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
                "profile.managed_default_content_settings.images": 1
            }
            options.add_experimental_option("prefs", prefs)

            # ‚≠ê CR√âER LE DRIVER
            self.driver = webdriver.Chrome(service=service, options=options)
            self.wait = WebDriverWait(self.driver, 10)

            # ‚≠ê IMPORTANT : Configurer les timeouts APR√àS cr√©ation du driver
            self.driver.set_page_load_timeout(30)  # Timeout de chargement de page
            self.driver.set_script_timeout(30)  # Timeout d'ex√©cution de scripts

            # ‚≠ê CRITICAL : Patcher le RemoteConnection pour r√©duire le timeout HTTP √† 30s
            # C'est ici que se fait vraiment le timeout HTTP !
            try:
                from selenium.webdriver.remote.remote_connection import RemoteConnection
                from urllib3.util.timeout import Timeout

                # Remplacer le timeout par d√©faut dans le RemoteConnection du driver
                if hasattr(self.driver.command_executor, '_client_config'):
                    # Acc√©der au client_config et le modifier
                    self.driver.command_executor._client_config.timeout = 30
                    logger.debug("‚úÖ Timeout HTTP du driver configur√© √† 30s via _client_config")

                # Alternative : Modifier directement la pool urllib3 du driver
                if hasattr(self.driver.command_executor, '_conn'):
                    # Cr√©er un nouveau timeout
                    new_timeout = Timeout(connect=30, read=30)
                    self.driver.command_executor._conn.timeout = new_timeout
                    logger.debug("‚úÖ Timeout HTTP du driver configur√© √† 30s via _conn")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de patcher le timeout HTTP: {e}")

            # Script pour masquer les signes d'automation
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            logger.info("‚úÖ SongBPM: Driver Selenium initialis√© avec succ√®s")

        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation driver SongBPM: {e}")
            self.driver = None
            self.wait = None
            raise

    def _handle_cookies(self):
        """G√®re le popup de cookies sur SongBPM"""
        try:
            logger.debug("V√©rification du popup de cookies...")
            
            # Attendre un peu que le popup apparaisse
            time.sleep(1.5)
            
            # PRIORIT√â ABSOLUE : Chercher le bouton "AGREE" du CMP (Consent Management Platform)
            try:
                # Chercher le bouton AGREE sp√©cifique dans qc-cmp2-summary-buttons
                agree_selectors = [
                    "div.qc-cmp2-summary-buttons button span:contains('AGREE')",
                    ".qc-cmp2-summary-buttons button[mode='primary']",
                    "button.css-47sehv",
                    "//div[contains(@class, 'qc-cmp2-summary-buttons')]//button//span[text()='AGREE']/..",
                    "//button[.//span[text()='AGREE']]"
                ]
                
                for selector in agree_selectors:
                    try:
                        if selector.startswith('//'):
                            # XPath
                            buttons = self.driver.find_elements(By.XPATH, selector)
                        else:
                            # CSS
                            buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        
                        if buttons:
                            for button in buttons:
                                try:
                                    if button.is_displayed() and button.is_enabled():
                                        button_text = button.text.strip()
                                        logger.info(f"‚úÖ Clic sur le bouton AGREE du CMP: '{button_text}'")
                                        button.click()
                                        time.sleep(1)
                                        logger.info("‚úÖ Popup CMP ferm√©")
                                        return
                                except Exception as e:
                                    logger.debug(f"Erreur clic AGREE: {e}")
                                    continue
                    except Exception as e:
                        logger.debug(f"Erreur recherche AGREE avec {selector}: {e}")
                        continue
            except Exception as e:
                logger.debug(f"Erreur recherche CMP AGREE: {e}")
            
            # Strat√©gie 1: Chercher sp√©cifiquement "Save & Exit" (le bouton exact)
            try:
                # XPath pr√©cis pour "Save & Exit" ou "Save and Exit"
                save_exit_xpath = "//button[contains(translate(text(), 'AND', 'and'), 'save') and contains(translate(text(), 'AND', 'and'), 'exit')]"
                buttons = self.driver.find_elements(By.XPATH, save_exit_xpath)
                
                if buttons:
                    for button in buttons:
                        try:
                            if button.is_displayed() and button.is_enabled():
                                button_text = button.text.strip()
                                # V√©rifier que ce n'est pas un bouton ind√©sirable
                                if button_text.lower() not in ['partners', 'settings', 'customize', 'manage']:
                                    logger.info(f"‚úÖ Clic sur le bouton de cookies: '{button_text}'")
                                    button.click()
                                    time.sleep(1)
                                    logger.info("‚úÖ Popup de cookies ferm√©")
                                    return
                        except Exception as e:
                            logger.debug(f"Erreur clic bouton: {e}")
                            continue
            except Exception as e:
                logger.debug(f"Erreur recherche Save & Exit: {e}")
            
            # Strat√©gie 2: Chercher un bouton "Accept All" ou similaire
            accept_keywords = ['accept all', 'accept cookies', 'agree', 'i understand']
            for keyword in accept_keywords:
                try:
                    xpath = f"//button[contains(translate(text(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{keyword}')]"
                    buttons = self.driver.find_elements(By.XPATH, xpath)
                    
                    if buttons:
                        for button in buttons:
                            try:
                                if button.is_displayed() and button.is_enabled():
                                    button_text = button.text.strip()
                                    # √âviter les boutons ind√©sirables
                                    if button_text.lower() not in ['partners', 'settings', 'customize', 'manage', 'reject']:
                                        logger.info(f"‚úÖ Clic sur le bouton de cookies: '{button_text}'")
                                        button.click()
                                        time.sleep(1)
                                        logger.info("‚úÖ Popup de cookies ferm√©")
                                        return
                            except Exception as e:
                                logger.debug(f"Erreur clic bouton: {e}")
                                continue
                except Exception as e:
                    logger.debug(f"Erreur recherche {keyword}: {e}")
            
            # Strat√©gie 3: Chercher dans un conteneur de cookies sp√©cifique
            try:
                # Chercher un div/section avec "cookie" ou "consent" dans la classe
                cookie_containers = self.driver.find_elements(By.CSS_SELECTOR, "[class*='cookie'], [class*='consent'], [id*='cookie'], [id*='consent']")
                
                for container in cookie_containers:
                    try:
                        if container.is_displayed():
                            # Chercher les boutons dans ce conteneur
                            buttons = container.find_elements(By.TAG_NAME, "button")
                            
                            # Chercher le bouton qui ressemble √† une acceptation/fermeture
                            for button in buttons:
                                try:
                                    if button.is_displayed() and button.is_enabled():
                                        button_text = button.text.strip().lower()
                                        # Mots-cl√©s positifs pour accepter
                                        positive_keywords = ['save', 'exit', 'accept', 'agree', 'ok', 'continue', 'got it', 'close']
                                        # Mots-cl√©s n√©gatifs √† √©viter
                                        negative_keywords = ['partners', 'settings', 'customize', 'manage', 'preferences', 'reject', 'decline', 'more options']
                                        
                                        if any(kw in button_text for kw in positive_keywords) and not any(kw in button_text for kw in negative_keywords):
                                            logger.info(f"‚úÖ Clic sur le bouton de cookies dans conteneur: '{button.text.strip()}'")
                                            button.click()
                                            time.sleep(1)
                                            logger.info("‚úÖ Popup de cookies ferm√©")
                                            return
                                except Exception as e:
                                    logger.debug(f"Erreur clic bouton dans conteneur: {e}")
                                    continue
                    except Exception as e:
                        logger.debug(f"Erreur inspection conteneur: {e}")
                        continue
            except Exception as e:
                logger.debug(f"Erreur recherche conteneur cookies: {e}")
            
            logger.debug("Aucun popup de cookies d√©tect√© ou d√©j√† ferm√©")
            
        except Exception as e:
            logger.debug(f"Erreur gestion cookies (non bloquant): {e}")

    def _extract_spotify_id_from_url(self, url: str) -> Optional[str]:
        """
        Extrait l'ID Spotify depuis une URL
        
        Args:
            url: URL Spotify
            
        Returns:
            ID Spotify (22 caract√®res) ou None
        """
        if not url:
            return None
            
        match = self.spotify_id_pattern.search(url)
        if match:
            return match.group(1)
        return None

    def _normalize_string(self, s: str) -> str:
        """Normalise une cha√Æne pour la comparaison (minuscules, sans espaces superflus)"""
        return " ".join(s.lower().strip().split())

    def _normalize_title_for_matching(self, title: str) -> str:
        """
        Normalise un titre pour le matching en enlevant les featurings
        
        Args:
            title: Titre √† normaliser
            
        Returns:
            Titre normalis√© sans featuring
        """
        import re
        
        # Enlever les variations de featuring
        patterns_to_remove = [
            r'\s*\(feat\.?\s+[^)]+\)',  # (feat. Artist)
            r'\s*\(ft\.?\s+[^)]+\)',    # (ft. Artist)
            r'\s*feat\.?\s+.+$',        # feat. Artist (en fin de titre)
            r'\s*ft\.?\s+.+$',          # ft. Artist (en fin de titre)
            r'\s*\[feat\.?\s+[^\]]+\]', # [feat. Artist]
            r'\s*\[ft\.?\s+[^\]]+\]',   # [ft. Artist]
        ]
        
        normalized = title
        for pattern in patterns_to_remove:
            normalized = re.sub(pattern, '', normalized, flags=re.IGNORECASE)
        
        return normalized.strip()

    def _match_track(self, result_title: str, result_artist: str, 
                 search_title: str, search_artist: str,
                 result_spotify_id: Optional[str] = None,
                 search_spotify_id: Optional[str] = None) -> bool:
        """
        V√©rifie si un r√©sultat correspond au morceau recherch√© - VERSION AM√âLIOR√âE
        
        Strat√©gie :
        1. Si les deux Spotify IDs sont pr√©sents ‚Üí matching strict par Spotify ID
        2. Sinon ‚Üí matching par titre (sans featuring) + artiste
        
        Args:
            result_title: Titre du r√©sultat
            result_artist: Artiste du r√©sultat
            search_title: Titre recherch√©
            search_artist: Artiste recherch√©
            result_spotify_id: ID Spotify du r√©sultat (optionnel)
            search_spotify_id: ID Spotify recherch√© (optionnel)
        
        Returns:
            True si le r√©sultat correspond
        """
        # PRIORIT√â 1 : Matching par Spotify ID (le plus fiable)
        if result_spotify_id and search_spotify_id:
            spotify_match = result_spotify_id == search_spotify_id
            logger.debug(f"üéµ Match Spotify ID: {result_spotify_id} vs {search_spotify_id} ‚Üí {spotify_match}")
            if spotify_match:
                logger.info(f"‚úÖ MATCH PARFAIT via Spotify ID: {search_spotify_id}")
                return True
            else:
                # Si on a les deux IDs mais qu'ils ne correspondent pas, c'est un REJET
                logger.info(f"‚ùå REJET: Spotify IDs diff√©rents")
                return False
        
        # PRIORIT√â 2 : Matching par nom (fallback si pas les DEUX Spotify IDs)
        # ‚≠ê AM√âLIORATION : Normaliser les titres en enlevant les featurings
        norm_result_title = self._normalize_string(self._normalize_title_for_matching(result_title))
        norm_search_title = self._normalize_string(self._normalize_title_for_matching(search_title))
        
        norm_result_artist = self._normalize_string(result_artist)
        norm_search_artist = self._normalize_string(search_artist)
        
        # V√©rification : titre (sans feat) ET artiste doivent correspondre
        title_match = norm_result_title == norm_search_title
        artist_match = norm_result_artist == norm_search_artist
        
        logger.debug(f"üîç Comparaison noms:")
        logger.debug(f"   Titres originaux: '{result_title}' vs '{search_title}'")
        logger.debug(f"   Titres (sans feat): '{norm_result_title}' vs '{norm_search_title}' ‚Üí {title_match}")
        logger.debug(f"   Artistes: '{norm_result_artist}' vs '{norm_search_artist}' ‚Üí {artist_match}")
        
        # ‚≠ê AM√âLIORATION : Accepter si titre correspond (sans feat) ET (artiste correspond OU on a le m√™me Spotify ID)
        if title_match and artist_match:
            logger.info(f"‚úÖ Match par titre (sans featuring) + artiste")
            return True
        elif title_match and result_spotify_id and search_spotify_id and result_spotify_id == search_spotify_id:
            # Cas particulier : titre identique + m√™me Spotify ID (ex: Guy2Bezbar Figaro feat. Josman)
            logger.info(f"‚úÖ Match par titre + Spotify ID (featuring ignor√©)")
            return True
        
        logger.info(f"‚ùå REJET: Pas de correspondance")
        return False

    def _extract_track_details(self, detail_url: str, timeout: int = 30) -> Dict[str, Any]:
        """
        Extrait les d√©tails complets depuis la page de d√©tail d'un morceau
        """
        details = {}
        
        try:
            logger.info(f"üìÑ Navigation vers page de d√©tail: {detail_url}")
            
            # D√©finir un timeout court pour le driver
            self.driver.set_page_load_timeout(timeout)
            self.driver.get(detail_url)
            
            # Attendre un peu
            time.sleep(2)
            
            # R√©cup√©rer le contenu principal
            content_selectors = [
                "div.lg\\:prose-xl",
                "div[class*='prose']",
                "main",
                "article"
            ]
            
            full_text = None
            for selector in content_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements and elements[0].is_displayed():
                        full_text = elements[0].text
                        logger.debug(f"‚úÖ Contenu trouv√© avec s√©lecteur: {selector}")
                        break
                except Exception as e:
                    logger.debug(f"S√©lecteur {selector} √©chou√©: {e}")
                    continue
            
            if not full_text:
                try:
                    full_text = self.driver.find_element(By.TAG_NAME, "body").text
                    logger.debug("Utilisation du body complet pour extraction")
                except:
                    logger.error("‚ùå Impossible de r√©cup√©rer le texte de la page")
                    return details
            
            import re
            
            # Nettoyer le texte
            clean_text = re.sub(r'\s+', ' ', full_text)
            clean_text = clean_text.replace('\xa0', ' ')
            
            # ‚≠ê AM√âLIORATION 1 : Extraction du MODE avec plusieurs patterns
            mode = None
            
            # Pattern 1 : Avec la key (ex: "with a C‚ôØ/D‚ô≠ key and a major mode")
            mode_match = re.search(
                r'key\s+and\s+a\s+(major|minor)\s+mode',
                clean_text,
                re.IGNORECASE
            )
            
            if mode_match:
                mode = mode_match.group(1).lower()
                logger.info(f"üéµ Mode trouv√© (pattern 1): {mode}")
            else:
                # Pattern 2 : Juste "major" ou "minor" avec "mode" (plus permissif)
                mode_match2 = re.search(
                    r'\b(major|minor)\s+mode\b',
                    clean_text,
                    re.IGNORECASE
                )
                if mode_match2:
                    mode = mode_match2.group(1).lower()
                    logger.info(f"üéµ Mode trouv√© (pattern 2): {mode}")
            
            if mode:
                details['mode'] = mode
            else:
                logger.warning("‚ö†Ô∏è Mode non trouv√© dans le texte")
                logger.debug(f"üîç Extrait recherch√©: {clean_text[max(0, clean_text.lower().find('key')-50):clean_text.lower().find('key')+100] if 'key' in clean_text.lower() else clean_text[:200]}")
            
            # ‚≠ê AM√âLIORATION 2 : Extraction de la KEY depuis le paragraphe (fallback)
            # Si on n'a pas d√©j√† la key, essayer de l'extraire du texte
            key_match = re.search(
                r'with\s+a\s+([A-G][\#b‚ôØ‚ô≠/]+)\s+key',
                clean_text,
                re.IGNORECASE
            )
            if key_match:
                key_found = key_match.group(1).strip()
                details['key_from_paragraph'] = key_found
                logger.info(f"üéµ Key trouv√©e dans paragraphe: {key_found}")
            
            # Extraire time signature
            time_sig_match = re.search(
                r'time\s+signature\s+of\s+(\d+)\s+beats?\s+per\s+bar',
                clean_text,
                re.IGNORECASE
            )
            if time_sig_match:
                details['time_signature'] = int(time_sig_match.group(1))
                logger.info(f"üéµ Time signature trouv√©e: {details['time_signature']}")
            
            # Logs d√©taill√©s
            logger.info(f"‚úÖ D√©tails extraits: {len(details)} attributs")
            logger.info(f"üìä D√©tails: {details}")
            
            return details
            
        except TimeoutError:
            logger.warning(f"‚è∞ Timeout ({timeout}s) lors de la r√©cup√©ration des d√©tails")
            raise
        except Exception as e:
            error_str = str(e)
            # D√©tecter les erreurs de timeout HTTP ou de session invalide
            if "Read timed out" in error_str or "HTTPConnectionPool" in error_str:
                logger.error(f"‚ùå Erreur extraction d√©tails: HTTPConnectionPool timeout d√©tect√©: {e}")
                # Marquer le driver comme invalide
                self.driver = None
                self.wait = None
            elif "invalid session id" in error_str.lower() or "session deleted" in error_str.lower():
                logger.warning("‚ö†Ô∏è Session invalide lors de l'extraction des d√©tails")
                self.driver = None
                self.wait = None
            else:
                logger.error(f"‚ùå Erreur extraction d√©tails: {e}")
                import traceback
                logger.debug(traceback.format_exc())
            return details

    def search_track(self, track_title: str, artist_name: str, 
                spotify_id: Optional[str] = None,
                max_results_to_check: int = 5,
                fetch_details: bool = True) -> Optional[Dict[str, Any]]:
        """
        Recherche un morceau sur SongBPM et r√©cup√®re ses informations
        """
        # S'assurer que le driver est initialis√©
        self._ensure_driver()
        
        if not self.driver:
            logger.error("‚ùå SongBPM: Driver non initialis√©")
            return None

        try:
            if spotify_id:
                logger.info(f"üîç SongBPM: Recherche '{track_title}' par {artist_name} (Spotify ID: {spotify_id})")
            else:
                logger.info(f"üîç SongBPM: Recherche '{track_title}' par {artist_name}")
            
            # ‚≠ê IMPORTANT : D√©finir un timeout strict pour la navigation
            self.driver.set_page_load_timeout(30)  # 30 secondes max pour charger une page
            
            # 1. Aller sur la page d'accueil
            try:
                self.driver.get(self.base_url)
                time.sleep(1)
            except TimeoutException:
                logger.error(f"‚è∞ TIMEOUT lors du chargement de la page d'accueil SongBPM")
                return None
            
            # 2. G√©rer le popup de cookies
            try:
                self._handle_cookies()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur gestion cookies: {e}")
                # On continue m√™me si les cookies posent probl√®me
            
            # 3. Recherche
            try:
                search_input = self.wait.until(
                    EC.presence_of_element_located((
                        By.CSS_SELECTOR, 
                        "input[name='query'][placeholder='type a song, get a bpm']"
                    ))
                )
                
                search_query = f"{artist_name} {track_title}"
                search_input.clear()
                search_input.send_keys(search_query)
                search_input.send_keys(Keys.RETURN)
                
                logger.debug(f"üìù SongBPM: Recherche soumise: '{search_query}'")
                
            except TimeoutException:
                logger.error(f"‚è∞ TIMEOUT lors de la recherche sur SongBPM")
                self._reset_driver_on_error()
                return None
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la saisie de la recherche: {e}")
                self._reset_driver_on_error()
                return None
            
            # 4. Attendre les r√©sultats (avec timeout)
            try:
                time.sleep(3)  # Attendre que les r√©sultats se chargent
                
                # V√©rifier que des r√©sultats sont pr√©sents
                result_selectors = [
                    "div.bg-card",
                    "a[href*='/@']",
                ]
                
                results_found = False
                for selector in result_selectors:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        logger.debug(f"‚úÖ Trouv√© {len(elements)} √©l√©ments avec s√©lecteur: {selector}")
                        results_found = True
                        break
                
                if not results_found:
                    logger.warning(f"‚ùå Aucun r√©sultat trouv√© pour '{track_title}' par {artist_name}")
                    return None
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification des r√©sultats: {e}")
                return None
            
            # 5. Extraire les r√©sultats
            results = self._get_search_results()
            
            if not results:
                logger.warning(f"‚ùå SongBPM: Aucun r√©sultat extrait pour '{track_title}'")
                return None
            
            # 6. V√©rifier les r√©sultats (jusqu'√† max_results_to_check)
            for i, result in enumerate(results[:max_results_to_check], 1):
                logger.debug(f"V√©rification r√©sultat {i}/{min(len(results), max_results_to_check)}")
                
                # Matcher avec le Spotify ID si disponible, sinon par nom
                if self._match_track(
                    result['title'], 
                    result['artist'],
                    track_title,
                    artist_name,
                    result_spotify_id=result.get('spotify_id'),
                    search_spotify_id=spotify_id
                ):
                    logger.info(f"‚úÖ SongBPM: Correspondance trouv√©e (r√©sultat #{i})")
                    logger.info(f"üìä Donn√©es de base: BPM={result.get('bpm')}, "
                              f"Key={result.get('key')}, Duration={result.get('duration')}")
                    if result.get('spotify_id'):
                        logger.info(f"üéµ Spotify ID confirm√©: {result['spotify_id']}")
                    
                    # 6. R√©cup√©rer les d√©tails depuis la page de d√©tail (notamment le mode)
                    if fetch_details and result.get('detail_url'):
                        try:
                            details = self._extract_track_details(result['detail_url'])
                            # Fusionner les d√©tails avec le r√©sultat
                            result.update(details)
                            logger.info(f"üìä Donn√©es compl√®tes avec mode: {result.get('mode')}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer les d√©tails: {e}")
                    
                    log_api("SongBPM", f"search/{track_title}", True)
                    return result
            
            # Aucune correspondance trouv√©e
            logger.warning(f"‚ùå SongBPM: Aucune correspondance exacte trouv√©e parmi "
                         f"{min(len(results), max_results_to_check)} r√©sultat(s)")
            log_api("SongBPM", f"search/{track_title}", False)
            return None

        except TimeoutException:
            logger.error("‚ùå SongBPM: Timeout lors de la recherche")
            self._reset_driver_on_error()
            log_api("SongBPM", f"search/{track_title}", False)
            return None
        except Exception as e:
            # D√©tecter les timeouts HTTP (ReadTimeoutError) et les erreurs de connexion
            error_str = str(e)
            if "Read timed out" in error_str or "HTTPConnectionPool" in error_str:
                logger.error(f"‚ùå SongBPM: HTTP timeout d√©tect√©: {e}")
                # ‚≠ê NE PAS r√©initialiser le driver car il a d√©j√† √©t√© ferm√© par le timeout
                # Juste r√©initialiser les r√©f√©rences
                self.driver = None
                self.wait = None
            elif "invalid session id" in error_str.lower() or "session deleted" in error_str.lower():
                # Le driver a √©t√© ferm√© de force (par le timeout)
                logger.warning("‚ö†Ô∏è Driver ferm√© de force, session invalide")
                self.driver = None
                self.wait = None
            else:
                logger.error(f"‚ùå SongBPM: Erreur lors de la recherche: {e}")
                self._reset_driver_on_error()
            log_api("SongBPM", f"search/{track_title}", False)
            return None

    def _get_search_results(self) -> List[Dict[str, Any]]:
        """
        Extrait les r√©sultats de recherche de la page
        
        Returns:
            Liste de dictionnaires contenant les infos des r√©sultats (avec spotify_id et detail_url)
        """
        results = []
        
        try:
            logger.debug("üîç D√©but extraction des r√©sultats...")
            time.sleep(1)
            
            # Strat√©gie : Trouver d'abord tous les conteneurs de r√©sultats (div.bg-card)
            # Chaque conteneur contient TOUT : le lien track + le lien Spotify
            result_containers = self.driver.find_elements(By.CSS_SELECTOR, "div.bg-card")
            
            logger.debug(f"üìã Trouv√© {len(result_containers)} conteneurs de r√©sultats")
            
            if not result_containers:
                logger.warning("‚ö†Ô∏è Aucun conteneur de r√©sultat trouv√©")
                return []
            
            for container_idx, container in enumerate(result_containers, 1):
                try:
                    result = {}
                    
                    # 1. Extraire le lien principal du track (/@artiste/titre)
                    track_links = container.find_elements(By.CSS_SELECTOR, "a[href*='/@']")
                    if not track_links:
                        logger.debug(f"Conteneur {container_idx}: Pas de lien track, skip")
                        continue
                    
                    track_link = track_links[0]
                    href = track_link.get_attribute('href')
                    
                    # V√©rifier la structure
                    if not href or '/@' not in href:
                        continue
                    
                    path = href.split('songbpm.com')[-1] if 'songbpm.com' in href else href
                    if path.count('/') < 2:
                        continue
                    
                    # √âviter les liens vers des services externes
                    if any(service in href.lower() for service in ['/apple-music', '/spotify', '/amazon', '/youtube']):
                        continue
                    
                    result['detail_url'] = href
                    logger.debug(f"üì¶ Conteneur {container_idx}: {href}")
                    
                    # 2. Extraire titre et artiste
                    try:
                        info_divs = track_link.find_elements(By.CSS_SELECTOR, "div.flex-1")
                        
                        for info_div in info_divs:
                            paragraphs = info_div.find_elements(By.TAG_NAME, "p")
                            
                            if len(paragraphs) >= 2:
                                artist_p = paragraphs[0]
                                title_p = paragraphs[1]
                                
                                artist_class = artist_p.get_attribute('class') or ''
                                title_class = title_p.get_attribute('class') or ''
                                
                                if 'text-sm' in artist_class and ('text-lg' in title_class or 'text-2xl' in title_class):
                                    result['artist'] = artist_p.text.strip()
                                    result['title'] = title_p.text.strip()
                                    logger.debug(f"   üë§ {result['artist']} - üéµ {result['title']}")
                                    break
                    except Exception as e:
                        logger.debug(f"   Erreur extraction titre/artiste: {e}")
                        continue
                    
                    if 'title' not in result or 'artist' not in result:
                        logger.debug(f"   Pas de titre/artiste, skip")
                        continue
                    
                    # 3. Extraire BPM, Key, Duration
                    try:
                        metrics_divs = track_link.find_elements(
                            By.CSS_SELECTOR, 
                            "div.flex.flex-1.flex-col.items-center"
                        )
                        
                        for metric_div in metrics_divs:
                            try:
                                spans = metric_div.find_elements(By.TAG_NAME, "span")
                                if len(spans) >= 2:
                                    label = spans[0].text.strip().upper()
                                    value = spans[1].text.strip()
                                    
                                    if label == "BPM":
                                        try:
                                            result['bpm'] = int(value)
                                            logger.debug(f"   üìä BPM: {result['bpm']}")
                                        except ValueError:
                                            pass
                                    elif label == "KEY":
                                        result['key'] = value
                                        logger.debug(f"   üéπ Key: {result['key']}")
                                    elif label == "DURATION":
                                        result['duration'] = value
                                        logger.debug(f"   ‚è±Ô∏è Duration: {result['duration']}")
                            except:
                                continue
                    except Exception as e:
                        logger.debug(f"   Erreur extraction m√©triques: {e}")
                    
                    # 4. ‚¨áÔ∏è CORRECTION : Extraire Spotify ID depuis le CONTENEUR (pas le lien track)
                    try:
                        # Chercher le lien Spotify dans CE conteneur sp√©cifique
                        spotify_links = container.find_elements(By.CSS_SELECTOR, "a[href*='spotify.com/track/']")
                        if spotify_links:
                            spotify_url = spotify_links[0].get_attribute('href')
                            spotify_id = self._extract_spotify_id_from_url(spotify_url)
                            if spotify_id:
                                result['spotify_id'] = spotify_id
                                result['spotify_url'] = spotify_url
                                logger.debug(f"   üéµ Spotify ID: {spotify_id}")
                    except Exception as e:
                        logger.debug(f"   Erreur extraction Spotify: {e}")
                    
                    # Ajouter le r√©sultat
                    if 'title' in result and 'artist' in result and 'detail_url' in result:
                        results.append(result)
                        logger.info(f"‚úÖ R√©sultat #{len(results)}: {result['artist']} - {result['title']}")
                        if result.get('spotify_id'):
                            logger.info(f"   üéµ Spotify ID: {result['spotify_id']}")
                    
                except Exception as e:
                    logger.debug(f"Erreur conteneur {container_idx}: {e}")
                    continue
            
            logger.info(f"üìä Total: {len(results)} r√©sultat(s) extrait(s)")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå Erreur extraction r√©sultats: {e}")
            import traceback
            logger.debug(f"Stacktrace: {traceback.format_exc()}")
            return []
    
    def enrich_track_data(self, track: Track, force_update: bool = False, artist_tracks: Optional[List[Track]] = None) -> bool:
        """
        Enrichit un track avec les donn√©es depuis SongBPM
        """
        try:
            # S'assurer que le driver est initialis√©
            self._ensure_driver()
            
            artist_name = track.artist.name if hasattr(track.artist, 'name') else str(track.artist)
            spotify_id = getattr(track, 'spotify_id', None)
            
            # ‚≠ê AM√âLIORATION : Timeout plus court pour search_track (30s au lieu de d√©faut)
            try:
                # Rechercher avec timeout court
                track_data = self.search_track(
                    track.title, 
                    artist_name, 
                    spotify_id=spotify_id, 
                    fetch_details=False
                )
            except TimeoutException as e:
                logger.error(f"‚è∞ TIMEOUT lors de la recherche SongBPM pour '{track.title}': {e}")
                return False
            except Exception as e:
                logger.error(f"‚ùå Erreur recherche SongBPM pour '{track.title}': {e}")
                return False
            
            if not track_data:
                logger.warning(f"‚ö†Ô∏è Aucune donn√©e trouv√©e sur SongBPM pour '{track.title}'")
                return False

            # √âTAPE 1 : Enrichir avec les DONN√âES DE BASE
            updated = False
            
            # BPM
            if (force_update or not track.bpm) and track_data.get('bpm'):
                track.bpm = track_data['bpm']
                logger.info(f"üìä BPM ajout√© depuis SongBPM: {track.bpm} pour {track.title}")
                updated = True
            
            # Key (donn√©e de base)
            key_value = track_data.get('key')
            if key_value and (force_update or not hasattr(track, 'key') or not track.key):
                track.key = key_value
                logger.info(f"üéµ Key ajout√©e depuis SongBPM: {track.key} pour {track.title}")
                updated = True
            
            # Spotify ID (avec validation)
            songbpm_spotify_id = track_data.get('spotify_id')
            if songbpm_spotify_id:
                if not hasattr(track, 'spotify_id') or not track.spotify_id:
                    if not artist_tracks or self.validate_spotify_id_unique(songbpm_spotify_id, track, artist_tracks):
                        track.spotify_id = songbpm_spotify_id
                        logger.info(f"üéµ Spotify ID ajout√© depuis SongBPM: {track.spotify_id}")
                        updated = True
            
            # Duration - CONVERSION DE "MM:SS" EN SECONDES
            if (force_update or not hasattr(track, 'duration') or not track.duration):
                if track_data.get('duration'):
                    duration_str = track_data['duration']
                    try:
                        if isinstance(duration_str, str) and ':' in duration_str:
                            parts = duration_str.split(':')
                            if len(parts) == 2:
                                minutes = int(parts[0])
                                seconds = int(parts[1])
                                track.duration = minutes * 60 + seconds
                                logger.info(f"‚è±Ô∏è Duration ajout√©e depuis SongBPM: {track.duration}s ({duration_str}) pour {track.title}")
                                updated = True
                        elif isinstance(duration_str, (int, float)):
                            track.duration = int(duration_str)
                            logger.info(f"‚è±Ô∏è Duration ajout√©e depuis SongBPM: {track.duration}s pour {track.title}")
                            updated = True
                    except ValueError as e:
                        logger.warning(f"‚ö†Ô∏è Erreur conversion duration '{duration_str}': {e}")
            
            # √âTAPE 2 : Essayer de r√©cup√©rer le MODE (avec timeout strict de 30s)
            detail_url = track_data.get('detail_url')
            if detail_url and key_value:
                logger.info(f"üîç Tentative de r√©cup√©ration du mode pour '{track.title}'...")
                
                try:
                    # ‚≠ê IMPORTANT : Timeout strict de 30 secondes
                    details = self._extract_track_details(detail_url, timeout=30)
                    
                    if details:
                        # Mode
                        if details.get('mode'):
                            mode_value = details['mode']
                            if force_update or not hasattr(track, 'mode') or not track.mode:
                                track.mode = mode_value
                                logger.info(f"üéº Mode ajout√© depuis SongBPM: {track.mode} pour {track.title}")
                                updated = True
                        
                        # ‚≠ê NOUVEAU : Utiliser la key du paragraphe si pas encore de key
                        if details.get('key_from_paragraph') and (force_update or not hasattr(track, 'key') or not track.key):
                            track.key = details['key_from_paragraph']
                            logger.info(f"üéµ Key ajout√©e depuis paragraphe: {track.key} pour {track.title}")
                            updated = True
                        
                        # Calculer musical_key si on a key ET mode
                        final_key = getattr(track, 'key', None)
                        final_mode = getattr(track, 'mode', None)
                        
                        if final_key and final_mode:
                            if force_update or not hasattr(track, 'musical_key') or not track.musical_key:
                                try:
                                    from src.utils.music_theory import key_mode_to_french_from_string
                                    track.musical_key = key_mode_to_french_from_string(final_key, final_mode)
                                    logger.info(f"üéº Musical key calcul√©e: {track.musical_key} pour {track.title}")
                                    updated = True
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è Erreur conversion musical_key: {e}")
                    
                except TimeoutException:
                    logger.warning(f"‚è∞ TIMEOUT (30s) lors de la r√©cup√©ration du mode pour '{track.title}' - Donn√©es de base conserv√©es")
                    # ‚≠ê IMPORTANT : On continue avec les donn√©es de base m√™me si timeout
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur r√©cup√©ration mode pour '{track.title}': {e} - Donn√©es de base conserv√©es")
            
            return updated
            
        except TimeoutException as e:
            logger.error(f"‚è∞ SongBPM TIMEOUT pour {track.title}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå SongBPM ERREUR pour {track.title}: {e}")
            import traceback
            logger.debug(traceback.format_exc())
            return False

    def _reset_driver_on_error(self):
        """R√©initialise le driver en cas d'erreur"""
        try:
            if self.driver:
                logger.warning("‚ö†Ô∏è R√©initialisation du driver apr√®s erreur")
                try:
                    self.driver.quit()
                except Exception as e:
                    # Ignorer les erreurs si le driver est d√©j√† ferm√©
                    logger.debug(f"Erreur fermeture driver (d√©j√† ferm√©?): {e}")
                finally:
                    self.driver = None
                    self.wait = None

                # Attendre un peu avant de r√©initialiser
                time.sleep(1)

                # NE PAS r√©initialiser automatiquement - laissez _ensure_driver le faire
                # self._init_driver()
        except Exception as e:
            logger.error(f"Erreur lors du reset du driver: {e}")
            self.driver = None
            self.wait = None

    def close(self):
        """Ferme le driver Selenium"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("‚úÖ SongBPM: Driver ferm√©")
            except Exception as e:
                logger.error(f"Erreur fermeture driver SongBPM: {e}")
            finally:
                self.driver = None
                self.wait = None

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def __del__(self):
        """Destructeur pour s'assurer que le driver est ferm√©"""
        self.close()